let readFile,writeFile,config,util,cp,Twitter;_299‍.x([["run",()=>run]]);_299‍.w("fs/promises",[["readFile",["readFile"],function(v){readFile=v}],["writeFile",["writeFile"],function(v){writeFile=v}]]);_299‍.w("./config",[["default",["config"],function(v){config=v}]]);_299‍.w("util",[["default",["util"],function(v){util=v}]]);_299‍.w("child_process",[["default",["cp"],function(v){cp=v}]]);_299‍.w("twitter-lite",[["default",["Twitter"],function(v){Twitter=v}]]);



// run



const exec = util.promisify(cp.exec);

       async function run () {
	try {
		const currentIP = (await exec(`wget -q -O - checkip.dyndns.com`)).stdout
			.replace(/.+(IP Address: )([\d\.]+).+/, '$2')
			.trim();

		const savedIP = (await readFile(config.savedIPLocation, 'utf-8')).trim();

		if (savedIP !== currentIP) {
			update(currentIP);
			tweet(savedIP, currentIP);
		} else {
			console.log('IP Address has not changed.')
		}
	} catch (err) {
		_299‍.g.console.error(err);
	}
}

// tweet if IP has changed



async function tweet (oldIP, newIP) {
	const twitter = new Twitter(config.twitter);
	const tweetText = `Our router's public IP address has changed from ${oldIP} to ${newIP}. Time to update our DNS settings!`;

	try {
		await twitter.post('statuses/update', {
			status: tweetText,
		});
	} catch (err) {
		_299‍.g.console.log(err);
	}
}

// update saved IP to match current one, if necessary

async function update (newIP) {
	await writeFile(config.savedIPLocation, newIP, 'utf-8');
}